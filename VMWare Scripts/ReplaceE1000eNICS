<#
.SYNOPSIS
    A script to replace E1000 NICs with VMXNET3 without losing mac/IP addresses w/minimal downtime (averaging around 5 packets lost)

.DESCRIPTION
    This script automates the process of switching network adapters from E1000 to VMXNET3 while preserving the IP configuration, the mac address, etc. 
    It dynamically retrieves current IP address information, DNS servers and subnet mask for reconfiguration.  
    It uses LAPS to authenticate to the VMs after losing networking and a domain admin (or similarly authorized account) to pull LAPS credentials
    It requires a bit of existing configurations - so eventually (or if someone wants to fork it) it should be adjusted to dynamically prompt
    for things like a local admin account vs LAPS, and possibly figure out how to update Linux VMs?

.AUTHOR
    LewsTherinSedai on Git

.DATE
    2024-05-29

.VERSION
    1.2

.LICENSE
    GPL v3.0

.PARAMETER vmName
    The name of the VM to configure. This parameter is mandatory.

.PARAMETER domain
    The domain in which the VM resides. Default is 'contoso.local'.

.PARAMETER domainCredsPath
    The path to the XML file containing the domain credentials. Default is '$PSScriptRoot\domainCreds.xml'.
    This is created with $credential = Get-Credential; $credential | Export-Clixml -Path .\domaincreds.xml
    Remember, the Export-Clixml cmdlet encrypts credential objects using the Windows Data Protection API. 
    The exported XML file can only be imported on the same computer by the same user. 
    ALWAYS handle credentials with care to maintain security. I set this up because my fingers got tired.

.EXAMPLE
    .\Configure-NetworkAdapter.ps1 -vmName 'Tayschrenn' -domain 'MalazIs.land' -domainCredsPath 'C:\creds\domainCreds.xml'

.REQUIREMENTS
    - VMware PowerCLI
    - Administrative privileges on the target VM
    - The VM must be powered on and have network connectivity
    - LAPS must be run on the domain - otherwise you can statically set an XML file with the VM local admin credentials OR adjust the sections to prompt for credentials

.NOTES
    - Ensure VMware Tools is installed and running on the target VM.
    - This script has been tested with PowerCLI 13.2 and vSphere 7.0.
    - If VMware Tools status is 'toolsOld', the script will still proceed but consider updating VMware Tools.

.FUTUREWORK
    - Add parameter to allow for prompting 
    - Add parameter to skip LAPS and prompt for local auth to VM
        + Add logic to skip the local admin component if manually providing a local non-domain account for 
    - Build a menu?
    - Add a section to revert all changes if something failed; this logic is escaping me in full as - in example - if the removal of the IP works but setting doesn't
      then setting the IP on the old adapter likely will fail too
    - If VMware Tools status is 'toolsOld', the script will still proceed but consider updating VMware Tools. This could be automated.
    - Linux support?
#>

# Global Variables
param (
    [Parameter(Mandatory=$true)]
    [string]$vmName,
    [string]$domain = "MalazIs.land",
    [string]$domainCredsPath = "$PSScriptRoot\domainCreds.xml"
)
#region Functions

# Function to log and exit with an error message
function Log-ErrorAndExit {
    param (
        [string]$message
    )
    Write-Host $message -ForegroundColor Red
    exit
}
#endregion

Write-Host "
                __--_--_-_
               ( I wish I  )" -ForegroundColor Magenta
Write-Host "              ( were a real )" -ForegroundColor Magenta
Write-Host "              (    llama   )" -ForegroundColor Magenta
Write-Host "               ( in Peru! )" -ForegroundColor Magenta
Write-Host "              o (__--_--_)" -ForegroundColor Magenta
Write-Host "           , o" -ForegroundColor Magenta
Write-Host "          ~)" -ForegroundColor Green
Write-Host "           (_---;" -ForegroundColor Green
Write-Host "              /|~|\ " -ForegroundColor Green
Write-Host "           /  /  /  |" -ForegroundColor Green

#region Initialization
# Import the credentials from the XML file
$domainCreds = Import-Clixml -Path $domainCredsPath

# Get the LAPS password
$laps = Get-LapsADPassword -Identity $vmName -Credential $domaincreds -Domain $domain

# Extract the computer name and password
$computerName = $laps.ComputerName
$lapsPassword = $laps.Password

# Create the username in the format 'computername\administrator'
$username = "$computerName\administrator"

# Create PSCredential object
$guestcreds = New-Object System.Management.Automation.PSCredential ($username, $lapsPassword)

# Get the VM
$vm = Get-VM -Name $vmName
if ($vm -eq $null) {
    Log-ErrorAndExit "VM $vmName not found."
}

# Check if the VM is powered on
if ($vm.PowerState -ne 'PoweredOn') {
    Log-ErrorAndExit "The VM is not powered on."
}

# Check if VMware Tools is running or outdated
if ($vm.ExtensionData.Guest.ToolsStatus -ne 'toolsOk' -and $vm.ExtensionData.Guest.ToolsStatus -ne 'toolsOld') {
    Log-ErrorAndExit "VMware Tools is not running or not installed."
}

# Check network connectivity
if (-not (Test-Connection -ComputerName $vm.Name -Count 3 -Quiet)) {
    Log-ErrorAndExit "Network connectivity to the VM is unavailable."
}
#endregion

#region Script Execution Inside VM
try {
    # Define the script to check and enable the local administrator account
    $scriptText = @"
    `$adminUser = [ADSI]'WinNT://./Administrator,user'
    if (`$adminUser.AccountDisabled) {
        `$adminUser.AccountDisabled = `$false
        `$adminUser.SetInfo()
        Write-Host 'The Administrator account was disabled and has now been enabled.'
    } else {
        Write-Host 'The Administrator account is already enabled.'
    }
"@

    # Run the script inside the VM
    $scriptResult = Invoke-VMScript -VM $vm -ScriptText $scriptText -GuestCredential $guestcreds -ScriptType PowerShell
    if ($scriptResult -eq $null) {
        Log-ErrorAndExit "Failed to run the script inside the VM."
    } else {
        Write-Host "Script executed successfully inside the VM." -ForegroundColor Green
        Write-Host $scriptResult.ScriptOutput
    }
} catch {
    Log-ErrorAndExit "An error occurred: $_"
}
#endregion

#region Network Adapter Configuration
# Get the E1000 network adapter
$networkAdapter = Get-NetworkAdapter -VM $vm | Where-Object {$_.Type -eq 'E1000'}
if ($networkAdapter -eq $null) {
    Log-ErrorAndExit "No E1000 network adapter found on VM $vmName."
}

# Get the MAC address and configuration of the E1000 network adapter
$macAddress = $networkAdapter.MacAddress
if ($macAddress -eq $null) {
    Log-ErrorAndExit "Failed to retrieve MAC address from the E1000 network adapter."
}
$networkName = $networkAdapter.NetworkName
$vdportgroup = Get-VDPortgroup -Name $networkName
if ($vdportgroup -eq $null) {
    Log-ErrorAndExit "Failed to retrieve network name from the E1000 network adapter."
}
$wakeOnLanEnabled = $networkAdapter.ExtensionData.WakeOnLanEnabled

# Get the IP configuration of the E1000 adapter using VMware Tools
$guestIpAddresses = $vm.Guest.IPAddress
if ($guestIpAddresses -eq $null -or $guestIpAddresses.Count -eq 0) {
    Log-ErrorAndExit "Failed to retrieve IP information from VMware Tools."
}

# Filter for the IPv4 address
$ipAddress = $guestIpAddresses | Where-Object { $_ -match '^\d{1,3}(\.\d{1,3}){3}$' }
if ($ipAddress -eq $null) {
    Log-ErrorAndExit "Failed to retrieve IPv4 address from VMware Tools."
}

# Script to retrieve current DNS servers and subnet mask
$retrieveNetworkConfigScript = @"
`$adapter = Get-NetAdapter | Where-Object {`$_.Status -eq 'Up'}
`$dnsServers = (Get-DnsClientServerAddress -InterfaceAlias `$adapter.InterfaceAlias).ServerAddresses
`$subnetMask = (Get-NetIPAddress -InterfaceAlias `$adapter.InterfaceAlias -AddressFamily IPv4).PrefixLength
`$dnsServers -join ',' 
`$subnetMask
"@

# Execute the script to get DNS and subnet mask
$networkConfig = Invoke-VMScript -VM $vm -ScriptText $retrieveNetworkConfigScript -GuestCredential $guestcreds -ScriptType PowerShell

if ($networkConfig -eq $null -or $networkConfig.ScriptOutput -eq $null) {
    Log-ErrorAndExit "Failed to retrieve network configuration from the VM."
}

# Extract the DNS servers and subnet mask from the script output
$dnsServers = ($networkConfig.ScriptOutput.Split("`n")[0]).Trim()
$subnetMask = ($networkConfig.ScriptOutput.Split("`n")[1]).Trim()

# Disconnect the E1000 network adapter
$disconnectResult = Set-NetworkAdapter -NetworkAdapter $networkAdapter -Connected:$false -Confirm:$false
if ($disconnectResult -eq $null) {
    Log-ErrorAndExit "Failed to disconnect the E1000 network adapter."
}

# Create a new VMXNET3 network adapter with the same configuration
$newNetworkAdapter = New-NetworkAdapter -VM $vm -Type 'VMXNET3' -MacAddress $macAddress -WakeOnLan:$wakeOnLanEnabled -PortGroup $vdportgroup -StartConnected
if ($newNetworkAdapter -eq $null) {
    Log-ErrorAndExit "Failed to create a new VMXNET3 network adapter."
}

# Wait for the new network adapter to be added and VMware Tools to recognize it
do {
    $vm = Get-VM -Name $vmName
    Start-Sleep -Seconds 5
} while ($vm.ExtensionData.Guest.ToolsStatus -ne 'toolsOk' -and $vm.ExtensionData.Guest.ToolsStatus -ne 'toolsOld')

# Automatically set the gateway based on the entered IP address
$defaultGateway = $ipAddress.Substring(0, $ipAddress.LastIndexOf('.')) + '.1'

# Create the script to run inside the VM
$scriptText = @"
`$IPType = 'IPv4'
`$adapter = Get-NetAdapter | ? {`$_.Status -eq 'up'}
`$offlineadapter = Get-NetAdapter | ? {`$_.Status -ne 'up'}
`$interfaceAlias = `$adapter.InterfaceAlias

# Remove any existing IP addresses
`$adapter | Get-NetIPAddress -AddressFamily `$IPType | Remove-NetIPAddress -Confirm:`$false
`$offlineadapter | Get-NetIPAddress -AddressFamily `$IPType | Remove-NetIPAddress -Confirm:`$false

# Remove any existing default gateways
`$adapter | Get-NetIPConfiguration | ForEach-Object { 
    if (`$_.Ipv4DefaultGateway -ne `$null) {
        Remove-NetRoute -InterfaceIndex `$_.InterfaceIndex -Confirm:`$false 
    }
}
`$offlineadapter | Get-NetIPConfiguration | ForEach-Object { 
    if (`$_.Ipv4DefaultGateway -ne `$null) {
        Remove-NetRoute -InterfaceIndex `$_.InterfaceIndex -Confirm:`$false 
    }
}

New-NetIPAddress -InterfaceAlias `$interfaceAlias -IPAddress '$ipAddress' -PrefixLength $subnetMask -DefaultGateway '$defaultGateway' -Confirm:`$false
Set-DnsClientServerAddress -InterfaceAlias `$interfaceAlias -ServerAddresses '$dnsServers'
"@

# Run the script inside the VM
$scriptResult = Invoke-VMScript -VM $vm -ScriptText $scriptText -GuestCredential $guestcreds
if ($scriptResult -eq $null) {
    Log-ErrorAndExit "Failed to run the network configuration script inside the VM."
}
#endregion

#region Final Checks and Cleanup
# Check network connectivity of the new adapter
$pingResult = Test-Connection -ComputerName $vmName -Count 3 -Quiet
if (-not $pingResult) {
    Log-ErrorAndExit "Ping test failed. The new network adapter is not responding."
}

# If everything is successful, remove the E1000 adapter using the VMware API
$vmConfig = $vm.ExtensionData.Config
$device = $vmConfig.Hardware.Device | Where-Object { $_.DeviceInfo.Label -eq $networkAdapter.Name }

if ($device -ne $null) {
    $spec = New-Object VMware.Vim.VirtualMachineConfigSpec
    $deviceSpec = New-Object VMware.Vim.VirtualDeviceConfigSpec
    $deviceSpec.Operation = [VMware.Vim.VirtualDeviceConfigSpecOperation]::Remove
    $deviceSpec.Device = $device
    $spec.DeviceChange += $deviceSpec

    $vm.ExtensionData.ReconfigVM_Task($spec)
    Write-Host "Successfully removed the E1000 network adapter from VM $vmName." -ForegroundColor Green
} else {
    Log-ErrorAndExit "Failed to find the E1000 network adapter in the VM's hardware devices."
}
#endregion
